<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.8.7">Jekyll</generator>
  
  
  <link href="https://cleverna.me/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://cleverna.me/" rel="alternate" type="text/html" />
  <updated>2020-12-04T16:47:53+00:00</updated>
  <id>https://cleverna.me//</id>

  
    <title type="html">Clever Name</title>
  

  
    <subtitle>Clever Name</subtitle>
  

  

  
  
    <entry>
      
      <title type="html">How to permanently remove the Qualcomm aptX HD notifcation from your android phone</title>
      
      
      <link href="https://cleverna.me/2020/12/04/how-to-permanently-remove-the-qualcomm-aptx-hd-notifcation-from-your-android-phone/" rel="alternate" type="text/html" title="How to permanently remove the Qualcomm aptX HD notifcation from your android phone" />
      
      <published>2020-12-04T16:39:00+00:00</published>
      <updated>2020-12-04T16:39:00+00:00</updated>
      <id>https://cleverna.me/2020/12/04/how-to-permanently-remove-the-qualcomm-aptx-hd-notifcation-from-your-android-phone</id>
      <content type="html" xml:base="https://cleverna.me/2020/12/04/how-to-permanently-remove-the-qualcomm-aptx-hd-notifcation-from-your-android-phone/">&lt;p&gt;&lt;img src=&quot;/assets/img/aptx_notification.png&quot; alt=&quot;This bastard&quot; title=&quot;Qualcomm aptX HD notification&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb shell cmd package uninstall -k --user 0 com.qualcomm.qtil.aptxals&lt;/code&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;You’ve probably had the same experience: you get your new wireless headphones in the post after hours spent weighing your options, you excitedly hold down the button to pair it with your phone but what’s this?&lt;/p&gt;

&lt;p&gt;An unhideable spam notification from a previously hidden system app? And all the notification permission controls are greyed out? And you can’t uninstall the app? And the notification never goes away on it’s own? Oh and what’s that? The functionality that the notification exists to “advertise” (to a person who has already paid for it) is already enabled by default? And if you press on the notification, it crashes the bluetooth audio stack completely, and doesn’t even disappear then?&lt;/p&gt;

&lt;p&gt;One thing is to be sure: the people responsible for this nightmarish prison of the spirit we are all trapped in &lt;em&gt;must&lt;/em&gt; be brought to justice. In the meantime though, let’s at least get rid of that fucking notification.&lt;/p&gt;

&lt;p&gt;Step 1. Install adb. Look elsewhere if you don’t know how to do that.&lt;/p&gt;

&lt;p&gt;Step 2: Run this in your command prompt:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb shell cmd package uninstall -k --user 0 com.qualcomm.qtil.aptxals&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can also remove this other package, I don’t know what it does but at this point anything under the qualcomm namespace can do one:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb shell cmd package uninstall -k --user 0 com.qualcomm.qtil.aptxalsOverlay&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This leaves the actual aptX functionality working just fine as far as I can tell. I have noticed no difference in any functionality or behavior as a result of doing this, but if you want to put it back how it was before you can reinstall the packages with these commands:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb shell cmd package install-existing com.qualcomm.qtil.aptxals&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb shell cmd package install-existing com.qualcomm.qtil.aptxalsOverlay&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The uninstall command never actually deletes them because they’re baked into the system image or whatever, so they can be reenabled with no issues.&lt;/p&gt;

&lt;p&gt;If you’re confused by this, &lt;a href=&quot;https://www.xda-developers.com/uninstall-carrier-oem-bloatware-without-root-access/&quot;&gt;here’s a page that explains the package removal process in much more detail&lt;/a&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">adb shell cmd package uninstall -k --user 0 com.qualcomm.qtil.aptxals</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The Unmode Show ep2 23-09-20 Tracklist + Downloads</title>
      
      
      <link href="https://cleverna.me/2020/09/27/the-unmode-show-ep2/" rel="alternate" type="text/html" title="The Unmode Show ep2 23-09-20 Tracklist + Downloads" />
      
      <published>2020-09-27T13:56:00+01:00</published>
      <updated>2020-09-27T13:56:00+01:00</updated>
      <id>https://cleverna.me/2020/09/27/the-unmode-show-ep2</id>
      <content type="html" xml:base="https://cleverna.me/2020/09/27/the-unmode-show-ep2/">&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/unmode_show_covers/ep2.jpg&quot; alt=&quot;The Unmode Show ep2&quot; class=&quot;medium&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;center &quot;&gt;&lt;audio class=&quot;medium&quot; controls=&quot;&quot; src=&quot;https://vps.cleverna.me/unmode_show_mp3s/The Unmode Show ep2 23-09-20.mp3&quot;&gt;&lt;/audio&gt;&lt;/div&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;https://drive.google.com/file/d/16E3YEzX0u4DK2aMUKiWvy8-63eFlPAfc/view?usp=sharing&quot;&gt;Download MP3&lt;/a&gt; | &lt;a href=&quot;https://drive.google.com/file/d/1AqUUOgakFxMdTUHq0F6HtfFM8j66pgax/view?usp=sharing&quot;&gt;Download FLAC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next installment - standing in for benny’s show again ❤️&lt;/p&gt;

&lt;ol class=&quot;tracklist&quot;&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode&lt;/span&gt; - Intro&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Don Ellis&lt;/span&gt; - Open Beauty&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode&lt;/span&gt; - Wet Ferns&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Herbie Hancock&lt;/span&gt; - Nobu&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Rahsaan Roland Kirk&lt;/span&gt; - Seasons&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Gunter Sommer&lt;/span&gt; - Hörmusik&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;OG Maco&lt;/span&gt; - 12 Bricks&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Kode9 &amp;amp; Spaceape&lt;/span&gt; - Sine&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Sleep Research Facility&lt;/span&gt; - 86°S 115°W&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Caroline Polacheck&lt;/span&gt; - Insomnia&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Jam City&lt;/span&gt; - Untitled 4&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Queen&lt;/span&gt; - Arboria (Planet of the Tree Men)&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode&lt;/span&gt; - Untitled&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Foodman&lt;/span&gt; - Nanika&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Virginia Astley&lt;/span&gt; - Sanctus&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Anne Mortifee &amp;amp; Paul Horn&lt;/span&gt; - Overture&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Kaija Saariaho&lt;/span&gt; - Kinkaku-ji (Golden Pavillon)&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Kaija Saariaho&lt;/span&gt; - Tenryu-ji (Dry Mountain Stream)&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Ken Ishii&lt;/span&gt; - Low&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Ecker &amp;amp; Meulyzer&lt;/span&gt; - Enclosure&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Ecker &amp;amp; Meulyzer&lt;/span&gt; - Sea Change&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Fis&lt;/span&gt; - Homologous 2&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Jana Winderen&lt;/span&gt; - Mae Taeng&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Jana Winderen&lt;/span&gt; - Ants&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode&lt;/span&gt; - Untitled&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Jon Hassell&lt;/span&gt; - Paris II&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Two Plus One&lt;/span&gt; - Complex State&lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">Download MP3 | Download FLAC The next installment - standing in for benny’s show again ❤️ Unmode - Intro Don Ellis - Open Beauty Unmode - Wet Ferns Herbie Hancock - Nobu Rahsaan Roland Kirk - Seasons Gunter Sommer - Hörmusik OG Maco - 12 Bricks Kode9 &amp;amp; Spaceape - Sine Sleep Research Facility - 86°S 115°W Caroline Polacheck - Insomnia Jam City - Untitled 4 Queen - Arboria (Planet of the Tree Men) Unmode - Untitled Foodman - Nanika Virginia Astley - Sanctus Anne Mortifee &amp;amp; Paul Horn - Overture Kaija Saariaho - Kinkaku-ji (Golden Pavillon) Kaija Saariaho - Tenryu-ji (Dry Mountain Stream) Ken Ishii - Low Ecker &amp;amp; Meulyzer - Enclosure Ecker &amp;amp; Meulyzer - Sea Change Fis - Homologous 2 Jana Winderen - Mae Taeng Jana Winderen - Ants Unmode - Untitled Jon Hassell - Paris II Two Plus One - Complex State</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The Unmode Show ep1 30-06-20 Tracklist + Downloads</title>
      
      
      <link href="https://cleverna.me/2020/07/07/the-unmode-show-ep1/" rel="alternate" type="text/html" title="The Unmode Show ep1 30-06-20 Tracklist + Downloads" />
      
      <published>2020-07-07T13:56:00+01:00</published>
      <updated>2020-07-07T13:56:00+01:00</updated>
      <id>https://cleverna.me/2020/07/07/the-unmode-show-ep1</id>
      <content type="html" xml:base="https://cleverna.me/2020/07/07/the-unmode-show-ep1/">&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/unmode_show_covers/ep1.jpg&quot; alt=&quot;The Unmode Show ep1&quot; class=&quot;medium&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;center &quot;&gt;&lt;audio class=&quot;medium&quot; controls=&quot;&quot; src=&quot;https://vps.cleverna.me/unmode_show_mp3s/The%20Unmode%20Show%20ep1%2030-06-20.mp3&quot;&gt;&lt;/audio&gt;&lt;/div&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;https://drive.google.com/file/d/1ymwViFlfLkFYis53z7epzNtq6RuPbovs/view?usp=sharing&quot;&gt;Download MP3&lt;/a&gt; | &lt;a href=&quot;https://drive.google.com/file/d/1K4QXv0fk3IpOhI439fOJvg8mJmuA8QlH/view?usp=sharing&quot;&gt;Download FLAC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first real episode, hopefully the first of many.&lt;/p&gt;

&lt;ol class=&quot;tracklist&quot;&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode&lt;/span&gt; - Intro&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Sven Libaek&lt;/span&gt; - Nature Walkabout (Desert)&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Herbie Mann&lt;/span&gt; - Flying&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;David Behrman&lt;/span&gt; - Music for Melody Driven Electronics&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Mimi Majick&lt;/span&gt; - Untitled One&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Keith Mansfield&lt;/span&gt; - Teenage Seadiver&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;T Power&lt;/span&gt; - Turquoise&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Delia Derbyshire&lt;/span&gt; - Blue Veils and Golden Sands&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode&lt;/span&gt; - Moon Echo&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Eric Serra&lt;/span&gt; - Paradise?&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Slugabed&lt;/span&gt; - Coolest Breeze Goin’&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Pulse Emitter&lt;/span&gt; - The 23rd Century&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Meitei (冥丁)&lt;/span&gt; - Utano (宇多野)&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;J Majick&lt;/span&gt; - Kindred Spirit&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Biosphere&lt;/span&gt; - Dissolving Clouds&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Franco Zauli&lt;/span&gt; - Eppure E’ Amore&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;D’Gary&lt;/span&gt; - Sahir&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Lloyd Miller and the Heliocentrics&lt;/span&gt; - Salendro&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Tim Shaw&lt;/span&gt; - 3 Different Sized Vessels&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Marta SmiLga&lt;/span&gt; - Untitled 11&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Laurie Spiegel&lt;/span&gt; - A Folk Study&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Shiroi Mishi&lt;/span&gt; - Kokyu&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Disasterpeace&lt;/span&gt; - Spirit&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode ft. Lola&lt;/span&gt; - Untitled Soundscape&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Radiowaves&lt;/span&gt; - Radiowaves 1&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;rkss&lt;/span&gt; - Hardwell, Nicky Romero, Fedde Le Grand, Ummet Ozcan, Spinnin Records and many others,this pack bring you best tools for making&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Logos&lt;/span&gt; - Kowloon&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Martsman&lt;/span&gt; - Some Minimal Business (LXC refix)&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode&lt;/span&gt; - Untitled Soundscape&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Thomas Koner&lt;/span&gt; - SUBSTRATE (Binaural)&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Eric Holm&lt;/span&gt; - Alioth&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode&lt;/span&gt; - Untitled Soundscape&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Stomu Yamata&lt;/span&gt; - The Red Buddha&lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">Download MP3 | Download FLAC The first real episode, hopefully the first of many. Unmode - Intro Sven Libaek - Nature Walkabout (Desert) Herbie Mann - Flying David Behrman - Music for Melody Driven Electronics Mimi Majick - Untitled One Keith Mansfield - Teenage Seadiver T Power - Turquoise Delia Derbyshire - Blue Veils and Golden Sands Unmode - Moon Echo Eric Serra - Paradise? Slugabed - Coolest Breeze Goin’ Pulse Emitter - The 23rd Century Meitei (冥丁) - Utano (宇多野) J Majick - Kindred Spirit Biosphere - Dissolving Clouds Franco Zauli - Eppure E’ Amore D’Gary - Sahir Lloyd Miller and the Heliocentrics - Salendro Tim Shaw - 3 Different Sized Vessels Marta SmiLga - Untitled 11 Laurie Spiegel - A Folk Study Shiroi Mishi - Kokyu Disasterpeace - Spirit Unmode ft. Lola - Untitled Soundscape Radiowaves - Radiowaves 1 rkss - Hardwell, Nicky Romero, Fedde Le Grand, Ummet Ozcan, Spinnin Records and many others,this pack bring you best tools for making Logos - Kowloon Martsman - Some Minimal Business (LXC refix) Unmode - Untitled Soundscape Thomas Koner - SUBSTRATE (Binaural) Eric Holm - Alioth Unmode - Untitled Soundscape Stomu Yamata - The Red Buddha</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The Unmode Show ep0 03-06-20 Tracklist + Downloads</title>
      
      
      <link href="https://cleverna.me/2020/07/07/the-unmode-show-ep0/" rel="alternate" type="text/html" title="The Unmode Show ep0 03-06-20 Tracklist + Downloads" />
      
      <published>2020-07-07T13:56:00+01:00</published>
      <updated>2020-07-07T13:56:00+01:00</updated>
      <id>https://cleverna.me/2020/07/07/the-unmode-show-ep0</id>
      <content type="html" xml:base="https://cleverna.me/2020/07/07/the-unmode-show-ep0/">&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/unmode_show_covers/ep00.jpg&quot; alt=&quot;The Unmode Show ep0&quot; class=&quot;medium&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;center &quot;&gt;&lt;audio class=&quot;medium&quot; controls=&quot;&quot; src=&quot;https://vps.cleverna.me/unmode_show_mp3s/The Unmode Show ep0 03-06-20 (Carpe DMs guest slot).mp3&quot;&gt;&lt;/audio&gt;&lt;/div&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;https://drive.google.com/file/d/1ZiExd6gU_8VnzwxxGKt5Mtj_1G_kJrl9/view?usp=sharing&quot;&gt;Download MP3&lt;/a&gt; | &lt;a href=&quot;https://drive.google.com/file/d/1qz0BL3H3-e_fr5A7pySOoRgY7MitjHoS/view?usp=sharing&quot;&gt;Download FLAC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Episode Zero! The prequel! This was a cover for my friend’s slot due to him being away from his studio.&lt;/p&gt;

&lt;ol class=&quot;tracklist&quot;&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode&lt;/span&gt; - Untitled Soundscape&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Hugh Hopper and Alan Gower&lt;/span&gt; - Morning Order&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Lifted&lt;/span&gt; - Lift&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode&lt;/span&gt; - Amethyst Parts 1 &amp;amp; 2&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Nintendo Sound Team&lt;/span&gt; - Field (Day)&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Lloyd Mcneil&lt;/span&gt; - Tranquil&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Zhao Jiazhen &amp;amp; Du Cong&lt;/span&gt; - Like a Dream&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Caroline Polachek&lt;/span&gt; - Parachute&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode&lt;/span&gt; - Timecloud&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Danny Scott Lane&lt;/span&gt; - Memory Record&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Nintendo Sound Team&lt;/span&gt; - Mount Hylia&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Motohiko Hamase&lt;/span&gt; - Pascal&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;O Yuki Conjugate&lt;/span&gt; - Shintone&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Lifted&lt;/span&gt; - 3D&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode&lt;/span&gt; - Untitled Soundscape&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;O Yuki Conjugate&lt;/span&gt; - Cloud Cover&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Eli Keszler&lt;/span&gt; - Lotus Awnings&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;No Fixed Abode (LHF)&lt;/span&gt; - Secret Lagoon&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Lee Gamble&lt;/span&gt; - 3-4 Synthetics&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Don Ellis&lt;/span&gt; - Water Jewel&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;24 Carat Black&lt;/span&gt; - In the Ghetto&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Unmode &amp;amp; Cartoon Physics&lt;/span&gt; - Plateaux&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Andrew Pekler&lt;/span&gt; - Approximate Bermeja&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Basic Influence&lt;/span&gt; - Rainforest&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Horsepower Productions&lt;/span&gt; - Classic Deluxe Part Two&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;artist&quot;&gt;Yoichiro Yoshikawa&lt;/span&gt; - Anna &amp;amp; Uni&lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">Download MP3 | Download FLAC Episode Zero! The prequel! This was a cover for my friend’s slot due to him being away from his studio. Unmode - Untitled Soundscape Hugh Hopper and Alan Gower - Morning Order Lifted - Lift Unmode - Amethyst Parts 1 &amp;amp; 2 Nintendo Sound Team - Field (Day) Lloyd Mcneil - Tranquil Zhao Jiazhen &amp;amp; Du Cong - Like a Dream Caroline Polachek - Parachute Unmode - Timecloud Danny Scott Lane - Memory Record Nintendo Sound Team - Mount Hylia Motohiko Hamase - Pascal O Yuki Conjugate - Shintone Lifted - 3D Unmode - Untitled Soundscape O Yuki Conjugate - Cloud Cover Eli Keszler - Lotus Awnings No Fixed Abode (LHF) - Secret Lagoon Lee Gamble - 3-4 Synthetics Don Ellis - Water Jewel 24 Carat Black - In the Ghetto Unmode &amp;amp; Cartoon Physics - Plateaux Andrew Pekler - Approximate Bermeja Basic Influence - Rainforest Horsepower Productions - Classic Deluxe Part Two Yoichiro Yoshikawa - Anna &amp;amp; Uni</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Deployment with TinyCI: a case study</title>
      
      
      <link href="https://cleverna.me/2019/06/20/deployment-with-tinyci-a-case-study/" rel="alternate" type="text/html" title="Deployment with TinyCI: a case study" />
      
      <published>2019-06-20T19:24:00+01:00</published>
      <updated>2019-06-20T19:24:00+01:00</updated>
      <id>https://cleverna.me/2019/06/20/deployment-with-tinyci-a-case-study</id>
      <content type="html" xml:base="https://cleverna.me/2019/06/20/deployment-with-tinyci-a-case-study/">&lt;p&gt;In this post I’m going to break down a strategy for continuous deployment using &lt;a href=&quot;https://github.com/JonnieCache/TinyCI&quot;&gt;TinyCI&lt;/a&gt;. If you’re not familiar, check out the &lt;a href=&quot;/2018/05/09/Introducing-TinyCI/&quot;&gt;Introducing TinyCI&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;/2019/05/29/tinyci-0-4/&quot;&gt;the release of TinyCI 0.4&lt;/a&gt; all the pieces are now in place for a system to automatically deploy new versions of an app after the test suite passes.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Let’s look at the &lt;a href=&quot;https://github.com/JonnieCache/fml/blob/89f544e581676c7f9a783f6e40e2b33df4678dd8/.tinyci.yml&quot;&gt;TinyCI config file from FML:&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/5122ec4ddd0aee57a3b78499507b93f0.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;There are two new features at play here: interpolation, and hooks.&lt;/p&gt;

&lt;h3 id=&quot;interpolation&quot;&gt;Interpolation&lt;/h3&gt;

&lt;p&gt;You may recognise the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;% erb tags %&amp;gt;&lt;/code&gt; to insert values into our config file there. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; value that we are assigning to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VERSION&lt;/code&gt; environment variable is the sha1 digest of the commit currently being processed by TinyCI. See &lt;a href=&quot;% post_url 2019-05-29-tinyci-0-4 %&quot;&gt;the recent post for details on this functionality.&lt;/a&gt; If you look in the &lt;a href=&quot;https://github.com/JonnieCache/fml/blob/89f544e581676c7f9a783f6e40e2b33df4678dd8/docker-compose.yml&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file for FML&lt;/a&gt; you’ll see that the commit name is being used to tag the images. Fairly self-explanatory stuff.&lt;/p&gt;

&lt;h3 id=&quot;hooks&quot;&gt;Hooks&lt;/h3&gt;

&lt;p&gt;Next, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hooks&lt;/code&gt; section. There are two hooks in play here: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_test_success&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_all&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_test_success&lt;/code&gt;, we’re building the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; target of the Dockerfile, which represents the  production version of the image, without any of the testing dependencies. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_all&lt;/code&gt; we’re removing all the build artifacts, both the export directory produced by TinyCI (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;%= export %&amp;gt;&lt;/code&gt; inserts the path to the exported tree,) and the testing version of the image in the local docker registry. FML runs on a small VPS and I don’t have a particular need to keep testing artifacts around.&lt;/p&gt;

&lt;h3 id=&quot;deployment&quot;&gt;Deployment&lt;/h3&gt;

&lt;p&gt;The running FML docker container is managed as a systemd service. Here’s the relevant line from its unit file:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f58e9291241c210b6897a0b03b70f1fa.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;If you scroll to the right you’ll see that the service is set up to run an image tagged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fml:production&lt;/code&gt;. As you’ve probably guessed, my strategy for deployment involves simply moving the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;production&lt;/code&gt; tag to another image and restarting the service.&lt;/p&gt;

&lt;p&gt;How do we do that? Here’s my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update_fml.sh&lt;/code&gt; script:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/c3779fd1aed014913ee1a3a0b14b1aeb.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The key line is number 5, there we’re calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; with a format string that returns the TinyCI result and the hash, grepping for the commits whose tests passed, taking the most recent result, and then cutting off just the hash. In the future this would be best achieved from the TinyCI command line interface, but for now this bash oneliner suffices.&lt;/p&gt;

&lt;p&gt;Next we present the sha to the user and ask them for confirmation, and then we apply the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;production&lt;/code&gt; tag to the docker image that we built from that commit, using the same tagging format defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now we’re all set up to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemctl restart fml&lt;/code&gt;, and presto, we’re running the latest passing build in production.&lt;/p&gt;

&lt;p&gt;Of course, this isn’t fully automated. We have to manually execute two commands to move our new build into production. If you want a truly automated continuous deployment system, you could just run all of this from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_test_success&lt;/code&gt; hook. In practice however, that level of automation isn’t desirable in my opinion. For a simple single-node deployment like this it’s generally preferable to have a human throw the switch.&lt;/p&gt;

&lt;p&gt;I quite like this setup, to me this is perfect for personal projects: it gives me just the right level of IaaS-style automation without too much complexity, and crucially very few moving parts. All we really have here is a few hundred lines of scripting. I hope you find it useful.&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">In this post I’m going to break down a strategy for continuous deployment using TinyCI. If you’re not familiar, check out the Introducing TinyCI post. With the release of TinyCI 0.4 all the pieces are now in place for a system to automatically deploy new versions of an app after the test suite passes.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">On Ceding Space to Non-Human Systems</title>
      
      
      <link href="https://cleverna.me/2019/05/30/on-ceding-space-to-non-human-systems/" rel="alternate" type="text/html" title="On Ceding Space to Non-Human Systems" />
      
      <published>2019-05-30T12:12:00+01:00</published>
      <updated>2019-05-30T12:12:00+01:00</updated>
      <id>https://cleverna.me/2019/05/30/on-ceding-space-to-non-human-systems</id>
      <content type="html" xml:base="https://cleverna.me/2019/05/30/on-ceding-space-to-non-human-systems/">&lt;div class=&quot;embed-container&quot;&gt;&lt;iframe src=&quot;https://player.vimeo.com/video/331947048&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;Another project I helped out a friend with, this time involving an arduino and some markov chains.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Last summer, my good friend &lt;a href=&quot;https://bdr.space&quot;&gt;benny&lt;/a&gt; had just finished the dissertation for the second stage of his architecure degree, titled &lt;a href=&quot;https://issuu.com/bdresnerreynolds/docs/on_ceding_space_to_non-human_system&quot;&gt;On Ceding Space to Non-Human Systems.&lt;/a&gt; For his final show he wanted to exhibit it in the form of some kind of sound art installation. Together we came up with the idea of resynthesizing the text on the fly using the classic markov chain algorithm.&lt;/p&gt;

&lt;p&gt;Here is his description of the piece:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A dial lies on the face of the installation. When turned all the way to the left, a text-to-speech voice reads the original essay out loud. As the dial is turned to the right, ‘AI’ generated content on the same subject begins to creep into the text, merging with the original writing to a greater and greater extent. The automated content merges with the text mid-sentence, at junctures calculated by grammatical rules. When pushed fully clockwise, the thesis is entirely ‘AI’ generated, and will carry on generating content indefinitely, albeit often in quite an absurd fashion.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The system was implemented on a raspberry pi hooked up to a cheap capacitive touchscreen. An arduino polled the position of the central potentiometer and fed it to the pi over serial. While using a fully loaded ATmega development board as an ADC is obviously overkill, who cares when youve got a drawer full of the damn things, right?.&lt;/p&gt;

&lt;p&gt;The pi runs a hastily-written python script. Two textfiles are provided as input: the dissertation, and an alternate text to merge it with. A hacked markov algorithm was implemented, which allows weights to be assigned to the different input sources, skewing the probability of selecting words from either corpus. The script generated a dozen markov chains, with weightings ranging from 1:0 (pull words only from the dissertation,) 1:1 (pull words randomly from either text,) to 0:1 (pull words only from the alternate text.)&lt;/p&gt;

&lt;p&gt;At runtime, the script would poll the position of the knob, and select from the range of models accordingly. It would generate a sentence, and play it out of the speaker using a TTS algorithm gleaned from the raspian repos.&lt;/p&gt;

&lt;p&gt;Thus, the effect is created: as you turn the knob, the spoken words gradually deviate from the original text.&lt;/p&gt;

&lt;p&gt;A fairly simple toy, hastily implemented, but it certainly seemed to be a hit with the academics. I think the crudity added a certain cyberpunk flair 😉&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">Another project I helped out a friend with, this time involving an arduino and some markov chains.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Misty Tropics</title>
      
      
      <link href="https://cleverna.me/2019/05/30/misty-tropics/" rel="alternate" type="text/html" title="Misty Tropics" />
      
      <published>2019-05-30T12:12:00+01:00</published>
      <updated>2019-05-30T12:12:00+01:00</updated>
      <id>https://cleverna.me/2019/05/30/misty-tropics</id>
      <content type="html" xml:base="https://cleverna.me/2019/05/30/misty-tropics/">&lt;div class=&quot;embed-container&quot;&gt;&lt;iframe src=&quot;https://player.vimeo.com/video/326806344&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;An interactive sound, light and smoke installation.&lt;/p&gt;

&lt;p&gt;Back in april some friends of mine asked me to help with an installation for a couple of Red Bull events called “Misty Tropics.”&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;As you can see, it was an elaborate setup - glass orbs with light fittings in them were suspended from the ceiling of the space. Along with power, the orbs were fed with vapour from a large smoke generator, such that smoke appeared to pour continuously from the lightbulbs themselves.&lt;/p&gt;

&lt;p&gt;Also strung up were the large aluminium spheres, fitted with capacitive sensors, all wired into an arduino set to output midi notes. When the spheres are touched, as well as sounds being triggered, waves of light are sent rippling through the room, lighting up the smoke.&lt;/p&gt;

&lt;p&gt;The x, y and z positions of both the triggers and the lights were mapped into the system, and custom algorithms were used to dim the different lightbulbs in sequence, creating the effect of waves of light moving through the space, emanating from where the trigger originated. The room being filled with smoke really aided in this “volumetric” effect.&lt;/p&gt;

&lt;p&gt;Louis made quite an interesting setup for the 3d time/space light mapping. The triggers were pushed into a python script which included a number of chainable functions of his own devising, which were running in a loop and would output the brightness values for the different bulbs based on their positions in time and space relative to the various trigger events. The different functions gave different effects like flashing, reversing the directions of the waves, staggering the progress of the waves in different directions, etc. Any variable in the algorithm could be mapped to the inevitable handy knob-based midi controller, such that the behavior could be tuned intuitively in realtime to match the music.&lt;/p&gt;

&lt;p&gt;Thus, different “presets” could be defined for the different triggers, which also triggered different parts of the music - bringing us onto the part that I actually did, alongside helping climb ladders and debug the midi setup. Myself and several other musicians were asked to create Ableton sets comprising ambient soundscapes, with four different channels each with a custom instrument of our devising, alongside a further channel for persistent drone sounds which would play constantly.&lt;/p&gt;

&lt;p&gt;(A snippet of my composition can be heard from 0:30-0:50 in the above video.)&lt;/p&gt;

&lt;p&gt;The midi notes from the touch triggers were fed straight into these ableton projects. Max4Live devices were used to map the repetitive notes onto melodic/harmonic structures.&lt;/p&gt;

&lt;p&gt;It was a lot of fun composing and sound designing for this unique situation. The incoming notes were randomized and fed through various filtering/mapping constructs to lock the eventual notes to a particular scale. A key concern was that the punters would directly percieve the link between their touching the trigger and the emanated sounds - too often in these kinds of installations the output becomes a cacophany and its impossible to work out what, if any effect you’re having by interacting with it. To this end I found I needed to abandon some of the tried and tested ambient sound design techniques, eg. slow crescendos, (the sound ends up arriving 3 seconds after you pressed the trigger) and extreme stereo reverb (the sound seems to emanate from a very long way away, so your brain doesnt associate it with the object you just touched right in front of your face.)&lt;/p&gt;

&lt;p&gt;All in all, a very fun project! I can’t wait to work with louis, benny and the rest of &lt;a href=&quot;https://typething.io&quot;&gt;typething&lt;/a&gt; again in the future.&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">An interactive sound, light and smoke installation. Back in april some friends of mine asked me to help with an installation for a couple of Red Bull events called “Misty Tropics.”</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">TinyCI 0.4 released</title>
      
      
      <link href="https://cleverna.me/2019/05/29/tinyci-0-4/" rel="alternate" type="text/html" title="TinyCI 0.4 released" />
      
      <published>2019-05-29T00:00:00+01:00</published>
      <updated>2019-05-29T00:00:00+01:00</updated>
      <id>https://cleverna.me/2019/05/29/tinyci-0-4</id>
      <content type="html" xml:base="https://cleverna.me/2019/05/29/tinyci-0-4/">&lt;p&gt;TinyCI 0.4 is out and as you might expect from the version number there are some new features.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New configuration format&lt;/li&gt;
  &lt;li&gt;Command interpolation&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_all&lt;/code&gt; hook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More info in the rest of the post…&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;new-configuration-format&quot;&gt;New configuration format&lt;/h3&gt;

&lt;p&gt;You now have the option of a terser format for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tinyci.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;build: blah
test: blah
hooks:
  after_test_success: blah
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Will be automatically transformed (internally) to this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;builder:
  class: ScriptBuilder
  config:
    command: blah
tester:
  class: ScriptTester
  config:
    command: blah
hooker:
  class: ScriptHooker
  config:
    after_test_success: blah
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A huge improvement I’m sure you’ll agree, especially since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Script&lt;/code&gt; classes are currently the only ones available anyway.&lt;/p&gt;

&lt;p&gt;Note that the new config format is a superset of the old one: configuration in the verbose format continues to work the same.&lt;/p&gt;

&lt;h3 id=&quot;command-interpolation&quot;&gt;Command Interpolation&lt;/h3&gt;

&lt;p&gt;You can now use ERB syntax to insert values into your build, test and hook commands at runtime. Let’s look at &lt;a href=&quot;https://github.com/JonnieCache/fml/blob/master/.tinyci.yml&quot;&gt;FML’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tinyci.yml&lt;/code&gt; file&lt;/a&gt; as an example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;build: VERSION=&amp;lt;%= commit %&amp;gt; docker-compose build --force-rm test
test: VERSION=&amp;lt;%= commit %&amp;gt; docker-compose run --rm test
hooks:
  after_test_success: VERSION=&amp;lt;%= commit %&amp;gt; docker-compose build app
  after_all: rm -rf &amp;lt;%= export %&amp;gt;#; docker rmi fml:&amp;lt;%= commit %&amp;gt;-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, in the build stage we’re building the test service from the docker compose file. The commit hash is passed in as an environment variable and is used to tag the docker image.
For the test stage, we run that same docker image to test the app.
In the hooks, we’re building the production version of the image once we know the build passes the tests. After everything’s finished, we delete the test docker image, as well as the exported copy of the app sourcetree.&lt;/p&gt;

&lt;p&gt;This way we are left with only working docker images in the local index.&lt;/p&gt;

&lt;h3 id=&quot;after_all-hook&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_all&lt;/code&gt; hook&lt;/h3&gt;

&lt;p&gt;As you might imagine, this hook is executed after everything else. It’s guaranteed to execute whether or not any stage has failed.&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">TinyCI 0.4 is out and as you might expect from the version number there are some new features. New configuration format Command interpolation after_all hook More info in the rest of the post…</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">TinyCI updates - versions 0.2.0 and 0.3.0</title>
      
      
      <link href="https://cleverna.me/2018/10/19/tinyci-updates/" rel="alternate" type="text/html" title="TinyCI updates - versions 0.2.0 and 0.3.0" />
      
      <published>2018-10-19T10:35:00+01:00</published>
      <updated>2018-10-19T10:35:00+01:00</updated>
      <id>https://cleverna.me/2018/10/19/tinyci-updates</id>
      <content type="html" xml:base="https://cleverna.me/2018/10/19/tinyci-updates/">&lt;p&gt;There have been two new versions of TinyCI released since launch. 0.2.0 added hooks/callbacks, and 0.3.0 added a handy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compact&lt;/code&gt; script to compress old build directories.&lt;/p&gt;

&lt;p&gt;In this post I’ll provide some details on the new functionality.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;020---hooks&quot;&gt;0.2.0 - hooks&lt;/h3&gt;

&lt;p&gt;This release adds hooks to TinyCI. These are just scripts that are called at various points in the execution sequence.&lt;/p&gt;

&lt;p&gt;Let us quote the order of execution from &lt;a href=&quot;https://github.com/JonnieCache/tinyci#hooks&quot;&gt;the README:&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  * clean
  * export

  before_build
  
  * build
  
  after_build_success
  after_build_failure
  after_build
  
  before_test
  
  * test
  
  after_test_success
  after_test_failure
  after_test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; indicates an actual phase of TinyCI’s execution, the rest are hooks. We have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;before_x&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_x_success&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_x_failure&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_x&lt;/code&gt; for both the build and test phases.&lt;/p&gt;

&lt;p&gt;As you might imagine, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;before&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after&lt;/code&gt; hooks always fire, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;success&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failure&lt;/code&gt; hooks are called only under the relevant condition.&lt;/p&gt;

&lt;p&gt;Additionally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;before&lt;/code&gt; hooks will halt processing of the commit if they fail (return an exit status &amp;gt; 0.) The other hooks will not stop execution.&lt;/p&gt;

&lt;p&gt;Hooks are enabled by adding a section to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tinyci.yml&lt;/code&gt; like so:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hooker:
  class: ScriptHooker
  config:
    before_test: ./before_test.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These hooks could be used for a variety of purposes, from simple ones like sending email or slack notifications on successful/failed testing of builds, to more complex uses like automated continuous deployment.&lt;/p&gt;

&lt;p&gt;Some of these possibilities are explored in the newly updated &lt;a href=&quot;https://github.com/JonnieCache/tinyci-example&quot;&gt;tinyci-example&lt;/a&gt; project.&lt;/p&gt;

&lt;h3 id=&quot;030---the-compact-command&quot;&gt;0.3.0 - the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compact&lt;/code&gt; command&lt;/h3&gt;

&lt;p&gt;Version 0.3.0 added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tinyci compact&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tinyci compact --help
Usage: compact [options]
    -n, --num-builds-to-leave &amp;lt;NUM&amp;gt;  number of builds to leave in place, starting from the most recent
    -b, --builds-to-leave &amp;lt;BUILDS&amp;gt;   specific build directories to leave in place, comma-separated
    -q, --[no-]quiet                 quietly run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The compactor is a script that compresses old build directories into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; files. “Old” is defined according to the options as described in the help there. For a full discussion, see the aforementioned &lt;a href=&quot;(https://github.com/JonnieCache/tinyci-example)&quot;&gt;example project.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;issueslimitations&quot;&gt;Issues/Limitations&lt;/h3&gt;

&lt;p&gt;Both of these features are in their infancy, and there are improvements to be made:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A fuller set of hooks could be added, although the ones currently provided should be enough to cover the majority of use cases.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Information about the execution should be passed to the hooks via environment variables. This is sort of an essential feature, especially for notification hooks, but some data can be obtained currently by parsing the log file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The compactor should have more ways to specify which directories to compress, for example some kind of date filtering, or filtering based on build/test success.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The compactor should have the ability to delete builds without keeping a compressed copy.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Watch this space!&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">There have been two new versions of TinyCI released since launch. 0.2.0 added hooks/callbacks, and 0.3.0 added a handy compact script to compress old build directories. In this post I’ll provide some details on the new functionality.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">podcast_feed_gen</title>
      
      
      <link href="https://cleverna.me/2018/10/14/podcast-feed-gen/" rel="alternate" type="text/html" title="podcast_feed_gen" />
      
      <published>2018-10-14T21:06:00+01:00</published>
      <updated>2018-10-14T21:06:00+01:00</updated>
      <id>https://cleverna.me/2018/10/14/podcast-feed-gen</id>
      <content type="html" xml:base="https://cleverna.me/2018/10/14/podcast-feed-gen/">&lt;p&gt;A small CLI app for generating podcast RSS feeds from a directory of files. Similar to &lt;a href=&quot;https://github.com/nerab/dropcaster&quot;&gt;dropcaster&lt;/a&gt; but much simpler, and it supports a wide variety of audio formats instead of just MP3.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JonnieCache/podcast_feed_gen&quot;&gt;Source/README here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea is to put a directory containing some audio files somewhere publically accessible over http, (dropbox works well) and then run this program to generate an RSS file, which can then be consumed by your podcast playing app of choice.&lt;/p&gt;

&lt;p&gt;Episode dates are read from the last-modified times of the files, and Title and Description fields are taken from the episode tags.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The motivation for this was wanting an easy way to play random audio files in my podcast app on my phone, primarily youtube videos downloaded using the superb &lt;a href=&quot;https://rg3.github.io/youtube-dl&quot;&gt;youtube-dl&lt;/a&gt; script. Being as the audio for youtube vids is never in mp3 format, the aforementioned dropcaster was not going to do the job.&lt;/p&gt;

&lt;p&gt;You can find the source and usage instructions at the above link, but here’s a quick rundown:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install taglib

$ gem install podcast_feed_gen

$ cat &amp;lt;&amp;lt; EOF &amp;gt; podcast_feed_gen.yml
base_url: http://example.com/podcast/
title: test feed
author: John Doe
description: A cool podcast
EOF

$ podcast_feed_gen &amp;gt; index.rss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">A small CLI app for generating podcast RSS feeds from a directory of files. Similar to dropcaster but much simpler, and it supports a wide variety of audio formats instead of just MP3. Source/README here The idea is to put a directory containing some audio files somewhere publically accessible over http, (dropbox works well) and then run this program to generate an RSS file, which can then be consumed by your podcast playing app of choice. Episode dates are read from the last-modified times of the files, and Title and Description fields are taken from the episode tags.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">jekyll-thumb</title>
      
      
      <link href="https://cleverna.me/2018/10/02/jekyll-thumb/" rel="alternate" type="text/html" title="jekyll-thumb" />
      
      <published>2018-10-02T16:39:00+01:00</published>
      <updated>2018-10-02T16:39:00+01:00</updated>
      <id>https://cleverna.me/2018/10/02/jekyll-thumb</id>
      <content type="html" xml:base="https://cleverna.me/2018/10/02/jekyll-thumb/">&lt;p&gt;A simple jekyll plugin to generate image thumbnails using &lt;a href=&quot;https://jcupitt.github.io/libvips/&quot;&gt;libvips&lt;/a&gt;. You feed it the image path and a width or height value, and it scales the image down, and outputs an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; tag wrapped in an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; pointing to the original image file.&lt;/p&gt;

&lt;p&gt;Simple stuff, but all the existing plugins were tied to imagemagick, which I hope to leave behind.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JonnieCache/jekyll-thumb&quot;&gt;Source code/README here&lt;/a&gt;, &lt;a href=&quot;https://rubygems.org/gems/jekyll-thumb&quot;&gt;RubyGem here&lt;/a&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">A simple jekyll plugin to generate image thumbnails using libvips. You feed it the image path and a width or height value, and it scales the image down, and outputs an &amp;lt;img /&amp;gt; tag wrapped in an &amp;lt;a&amp;gt; pointing to the original image file. Simple stuff, but all the existing plugins were tied to imagemagick, which I hope to leave behind. Source code/README here, RubyGem here.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">FML</title>
      
      
      <link href="https://cleverna.me/2018/05/10/FML/" rel="alternate" type="text/html" title="FML" />
      
      <published>2018-05-10T15:16:00+01:00</published>
      <updated>2018-05-10T15:16:00+01:00</updated>
      <id>https://cleverna.me/2018/05/10/FML</id>
      <content type="html" xml:base="https://cleverna.me/2018/05/10/FML/">&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;http://fml.cleverna.me&quot;&gt;&lt;img src=&quot;/assets/img/fml_logo.jpg&quot; alt=&quot;FML&quot; title=&quot;FML aka Fix My Life&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;center nomargin center nomargin&quot;&gt;&lt;sub&gt;&lt;sup&gt;&lt;em&gt;aka&lt;/em&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;h4 class=&quot;center nomargin&quot; id=&quot;fix-my-life&quot;&gt;&lt;a href=&quot;http://fml.cleverna.me&quot;&gt;Fix My Life&lt;/a&gt;&lt;/h4&gt;
&lt;p class=&quot;center nomargin&quot;&gt;&lt;sub&gt;&lt;sup&gt;&lt;em&gt;aka&lt;/em&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;h5 class=&quot;center&quot; id=&quot;yet-another-todo-app-but-with-points&quot;&gt;Yet Another Todo App (but with points)&lt;/h5&gt;

&lt;p&gt;FML is an app in which you give yourself tasks to do, and assign various point values to them. You log the completions of the tasks, and clock up a running total of points. In other words, it’s a standard task tracking app with elements of gamification. It also has an ugly purple color scheme. &lt;a href=&quot;http://fml.cleverna.me&quot;&gt;You can sign up and use it here.&lt;/a&gt; &lt;a href=&quot;https://github.com/JonnieCache/FML&quot;&gt;The source code is available here.&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;gallery&quot;&gt;
  &lt;a href=&quot;/assets/img/fml_screenshots/fml_screenshot_1.png&quot; target=&quot;_blank&quot; class=&quot;thumb&quot;&gt;&lt;img src=&quot;/assets/img/fml_screenshots/fml_screenshot_1-360w.png&quot; width=&quot;360&quot; height=&quot;270&quot; /&gt;&lt;/a&gt;
  &lt;a href=&quot;/assets/img/fml_screenshots/fml_screenshot_2.png&quot; target=&quot;_blank&quot; class=&quot;thumb&quot;&gt;&lt;img src=&quot;/assets/img/fml_screenshots/fml_screenshot_2-360w.png&quot; width=&quot;360&quot; height=&quot;270&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;!-- more --&gt;

&lt;p&gt;The motivation for this was playing games like Rimworld, where you have stewardship over a number of characters and you have to achieve various aims, while simultaneously keeping them happy, defined in terms of a number of “needs,” eg. food, rest, comfort etc. This model, which was first established in The Sims, places a lot of emphasis on milking as much productivity out of the day/night cycle while keeping these needs satisfied to a minimum level so your charges don’t fall apart.&lt;/p&gt;

&lt;div class=&quot;gallery&quot;&gt;
  &lt;a href=&quot;/assets/img/rimworld_screenshot.png&quot; target=&quot;_blank&quot; class=&quot;thumb&quot;&gt;&lt;img src=&quot;/assets/img/rimworld_screenshot-337w.png&quot; height=&quot;200&quot; width=&quot;337&quot; /&gt;&lt;/a&gt;
  &lt;a href=&quot;/assets/img/sims_screenshot.jpg&quot; target=&quot;_blank&quot; class=&quot;thumb&quot;&gt;&lt;img src=&quot;/assets/img/sims_screenshot-266w.jpg&quot; height=&quot;200&quot; width=&quot;266&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;I know what you’re thinking: this sounds like a perfect metaphor for the treadmill which is my life under capitalism. Those games are set up in such a way that you’re compelled to optimize the use of time within the day in pursuit of maximum efficiency, and that this process becomes a lot of fun.&lt;/p&gt;

&lt;p&gt;I’m sure you can see where this is going: “What if my real life were like that?” Hell yeah, let’s build a skinner box around ourselves. At least it’s open source.&lt;/p&gt;

&lt;h4 id=&quot;how-it-works&quot;&gt;How it works&lt;/h4&gt;

&lt;p&gt;You create a new task by clicking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; button in the top right. This presents the usual kind of form, here you can fill in a name, the points value of the task, select if it should be recurring or not, and assign to it a tag. This control will also let you define a new tag.&lt;/p&gt;

&lt;p&gt;Upon clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt;, a card representing the task is added to the main interface, and if a Tag was chosen, an empty “meter” for that tag will appear at the top of the page. Click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Complete!&lt;/code&gt; button for your newly minted task, and you will see points added to your total, shown in the top right of your page. You will also see a glowing pink “ghost” of the points value escaping from where you clicked, much like in an RPG game, and you will hear a pleasing sound effect. This is designed to add to the dopamine reward, skyrocketing your productivity and motivation.&lt;/p&gt;

&lt;div class=&quot;gallery&quot; style=&quot;align-items: flex-start&quot;&gt;
  &lt;div style=&quot;text-align: right&quot;&gt;
    &lt;p&gt;There's also a Sublime Text/Atom style autocomplete interface for quickly completing tasks, accessible by pressing Space.&lt;/p&gt;
    
    &lt;p&gt;Type to search, use the arrow keys to select a result, and hit enter to complete the task.&lt;/p&gt;
  &lt;/div&gt;
  
  &lt;a href=&quot;/assets/img/fml_screenshots/fml_screenshot_3.png&quot; target=&quot;_blank&quot; class=&quot;thumb&quot;&gt;&lt;img src=&quot;/assets/img/fml_screenshots/fml_screenshot_3-400w.png&quot; width=&quot;400&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;You will also, assuming it is there, see the meter at the top fill up with an amount proportional to the points value assigned to the task. To set how many points the meter requires in order to be filled, click the tag icon on the side of the task card. This will bring up a form for editing the tag, where you can set the name, the colour and aditionally hide the meter.
The amount of points needed to fill the meter is specified in terms on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goal per week.&lt;/code&gt; So if the GPW of a tag is 10 and you have completed a 1 point task with that tag 3 times in the last 7 days, the meter will be sitting at 30%. Note that this is a rolling 7 day window and it does not tick over every monday morning.&lt;/p&gt;

&lt;p&gt;Finally, after completing your first task you will see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Combo&lt;/code&gt; value in the top right of the page tick up to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2x&lt;/code&gt;. This means that any subsequent tasks completed will earn twice their value, in the manner of a classic fighting game. The crucial point is that this value will reset to zero if a day passes without any tasks being completed, motivating you to continue your streak. If you complete tasks every day for a number of weeks, the points awarded will increase geometrically, elevating your score to the stratosphere.&lt;/p&gt;

&lt;h4 id=&quot;design&quot;&gt;Design&lt;/h4&gt;

&lt;p&gt;FML is developed in Ruby and React. The ruby end is fairly conventional, but the react side is built with a homemade design in place of tools like redux or react-router. This was done as an exercize to become more intimately familiar with that workflow, and ultimately served as an education in why those tools exist.&lt;/p&gt;

&lt;p&gt;A full explanation of the design can be found in the &lt;a href=&quot;https://github.com/JonnieCache/FML&quot;&gt;README over at the github repo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once again, a running instance of the app is available at &lt;a href=&quot;http://fml.cleverna.me&quot;&gt;http://fml.cleverna.me&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">aka Fix My Life aka Yet Another Todo App (but with points) FML is an app in which you give yourself tasks to do, and assign various point values to them. You log the completions of the tasks, and clock up a running total of points. In other words, it’s a standard task tracking app with elements of gamification. It also has an ugly purple color scheme. You can sign up and use it here. The source code is available here.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Introducing TinyCI</title>
      
      
      <link href="https://cleverna.me/2018/05/09/Introducing-TinyCI/" rel="alternate" type="text/html" title="Introducing TinyCI" />
      
      <published>2018-05-09T11:39:55+01:00</published>
      <updated>2018-05-09T11:39:55+01:00</updated>
      <id>https://cleverna.me/2018/05/09/Introducing-TinyCI</id>
      <content type="html" xml:base="https://cleverna.me/2018/05/09/Introducing-TinyCI/">&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; _____ _               _____  _____
/__   (_)_ __  _   _  / ___/ /_  _/
   | || | '_ \| | | |/ /     / /
   | || | | | | |_| / /___/\/ /_  
   |_||_|_| |_|\__, \____/\____/
               |___/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JonnieCache/tinyci&quot;&gt;TinyCI&lt;/a&gt; is basically a git hook that builds your project and runs your tests when you push a new commit. It’s pitched as a CI system, so a competitor to enormous systems like &lt;a href=&quot;https://circleci.com&quot;&gt;Circle&lt;/a&gt; and &lt;a href=&quot;travis-ci.org&quot;&gt;Travis&lt;/a&gt;. Really though, its much more along the lines of directory watcher scripts like &lt;a href=&quot;https://github.com/guard/guard&quot;&gt;Guard&lt;/a&gt; which people use to automatically run their tests whenever they save their files locally.&lt;/p&gt;

&lt;p&gt;For a full exploration of the architecture and limitations, please see the &lt;a href=&quot;https://github.com/JonnieCache/tinyci&quot;&gt;project’s README.&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Usually, this leads to the tests being run on a constant rotation, especially if you have your editor set up to automatically save files when it loses focus. This is all good: test early and often as they say. However, eventually you get to the stage of writing heavy integration tests that take a long time to execute, and consume significant resources.&lt;/p&gt;

&lt;p&gt;My solution was to exclude the integration tests from my autotester, and to write TinyCI as a sort of autotester for the repo.&lt;/p&gt;

&lt;p&gt;This provides several benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Heavier tests are only run when I commit, every half hour or so. This seems more appropriate than every 10 seconds when I write the files out to disk.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;They can be run on a different machine than the underpowered ultraportable you probably use for development these days.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can conveniently run them in a different environment. I run mine on a linux VPS, because this allows me to execute the tests in the same containers as they’re deployed in. I can’t do that at all on my dev machine, because I’m allergic to upgrading OSX and as such I don’t have the hypervisor.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why not use a proper CI system? I tried that, but they’re all enormous, hulking things designed for the enterprise. Seriously, look into running your own instance of Travis sometime. Even they advise against it. It would take longer to set the damn thing up than it takes to write most personal projects.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;TinyCI is written in ruby. It executes as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post-update&lt;/code&gt; hook, and when it runs it looks for all untested commits in the repo. For each of these, in order of commit time, it exports the tree and runs a build script and then a test script, referenced in a config file found in the tree itself. The commit is then tagged with “success” or “failure” using the little-used &lt;a href=&quot;https://git-scm.com/docs/git-notes&quot;&gt;git-notes&lt;/a&gt; functionality.&lt;/p&gt;

&lt;p&gt;Once again, for a full exploration of the architecture and limitations, please see the &lt;a href=&quot;https://github.com/JonnieCache/tinyci&quot;&gt;project’s README.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please let me know of any questions or comments you might have! Hope you find it useful!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="code" />
      
        <category term="project" />
      

      

      
        <summary type="html">_____ _ _____ _____ /__ (_)_ __ _ _ / ___/ /_ _/ | || | '_ \| | | |/ / / / | || | | | | |_| / /___/\/ /_ |_||_|_| |_|\__, \____/\____/ |___/ TinyCI is basically a git hook that builds your project and runs your tests when you push a new commit. It’s pitched as a CI system, so a competitor to enormous systems like Circle and Travis. Really though, its much more along the lines of directory watcher scripts like Guard which people use to automatically run their tests whenever they save their files locally. For a full exploration of the architecture and limitations, please see the project’s README.</summary>
      

      
      
    </entry>
  
  
</feed>
